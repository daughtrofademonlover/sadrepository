#include<math.h> 
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h> 
#define SIZE 50
 
typedef struct stack
{
    int data[SIZE];
    int top;
}stack;
 
char* menu();
int isBalancedParentheses(char*);
int getOperatorPriority(char);
void initialize(stack* );
int empty(stack* );
int full(stack *);
int pop(stack *);
void push(stack *,int);
char* convertToPostfix(char*);
int isOperator(char);
int evaluate(char*);
int calculate(int, int, char);
 
void main()
{
    char* str;
	char* postFix;
	int answer;
	while(strcmp(str = menu(), "exit")!=0){
		if(isBalancedParentheses(str)){
		printf("%s \n", str);
	postFix = convertToPostfix(str);
	answer = evaluate(postFix);
		printf("%s \n", postFix);
		printf("%d \n", answer);
	}
		else printf("Not Balanced");
	}

}
 
char* convertToPostfix(char* infix)
{
    stack stack1;
    char c, temp;
    char* postfix = malloc(sizeof(char)*SIZE);
    int i,j;   
    initialize(&stack1);
    j=0;
 
    for(i=0 ; infix[i]!='\0' ; i++)
    {
        temp = infix[i];
        if(isdigit(temp))
            postfix[j++]=temp;
        else
            if(temp == '(' )
               push(&stack1 , '(' );
        else
            if(temp == ')')
                while(( c = pop(&stack1)) != '(' )
                      postfix[j++] = c;
                else
                {
                    while(getOperatorPriority(temp) <= getOperatorPriority (top(&stack1)) && !empty(&stack1))
                    {
                        c = pop(&stack1);
                        postfix[j++] = c;
                    }
                    push(&stack1 , temp);
                }
    }
 
    while(!empty(&stack1))
    {
        c = pop(&stack1);
        postfix[j++]= c;
    }
 
    postfix[j]='\0';
    return postfix;
}
 
char* menu() {
	
	char input;
	char* abort;
	char* str;
	printf("\nMenu \n e: enter or x: exit ");
	scanf("%c", &input);
		if(input == 'x') {
			abort = (char*)malloc(sizeof(char)*100);
			abort = "exit";
			return abort;
		}
		if(input == 'e') {
			fflush(stdin);
			printf("\n Enter infix expression: \n");
			str = (char*)malloc(sizeof(char)*SIZE);
				scanf("%[^\n]", str);
				fflush(stdin);
			return str;
		}
}

int isBalancedParentheses(char* c){
	int i, len;
	len = strlen(c);
	struct stack stack1;
	initialize(&stack1);
	for(i = 0; i < len; i++){
		if(c[i] == '('){
			push(&stack1,c[i]);
		}
		else if(c[i] == ')'){
			if(empty(&stack1))
				return 0;
			else if (pop(&stack1));
		}
	}
	if(empty(&stack1))
		return 1;
	else return 0;
}	

int isOperator(char c){
	
	if(c == '+' || c == '-' || c == '*' || c == '/' || c == '%' || c == '^')
		return 1;
	else return 0;
}

int convertToInt(char c){
	int x = c - '0';
	return x;
}

int calculate(int a, int b, char op){
	
	if( op == '+')
		return (a + b);
	if( op == '-')
		return b - a;
	if( op == '*')
		return a * b;
	if( op == '/')
		return b / a;
	if( op == '%')
		return b % a;
	if( op == '^'){
	int i, ans = b;
	if( b == 0)
		return 0;
	else if( a == 0)
			return 1;
	else if( a == 1)
			return b;
	else if (a >= 2) {
		for (i = 1; i < a; i++)
			ans *= b ;
		}
		return ans;
}
}

int evaluate(char* postfix){
	
	stack stack2;
	initialize(&stack2);
	char temp;
	int i, temp1, temp2, tempResult;
	int answer = malloc(sizeof(int)*100);
		
	for(i = 0; postfix[i] != '\0'; i++){
		
		temp = postfix[i];
		if(isdigit(temp)){
			temp = convertToInt(temp);
			push(&stack2, temp);
		}
		else if(isOperator(temp)){
			temp1 = pop(&stack2);
			temp2 = pop(&stack2);
			tempResult = calculate(temp1, temp2, temp);
			push(&stack2, tempResult);
		}
			
		}
		
	answer = pop(&stack2);
	return answer;
	}
		
int getOperatorPriority(char c)
{
    if(c == '(')
        return(0);
    if(c =='+'|| c =='-')
        return(1);
    if(c == '*'|| c== '/' || c=='%')
        return(2);
    if(c == '^' );
    	return (3);
 
    return(4);
}
 
void initialize(stack* stackPtr)
{
    stackPtr->top=-1;
}
 
int empty(stack *stackPtr)
{
    if(stackPtr->top == -1)
        return(1); 
    return(0);
}
 
 
void push(stack *stackPtr, int x)
{
    stackPtr->top= stackPtr-> top+1;
    stackPtr->data[stackPtr->top] = x;
}
 
int pop(stack* stackPtr)
{
    int x;
    x = stackPtr->data[stackPtr->top];
    stackPtr->top = stackPtr->top-1;
    return(x);
}
 
int top(stack* stackPtr)
{
    return (stackPtr->data[stackPtr->top]);
}
